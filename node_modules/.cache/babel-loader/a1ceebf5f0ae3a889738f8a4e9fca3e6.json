{"ast":null,"code":"const articulos = [{\n  nombre: \"Oficina de Centro\",\n  id: \"1\",\n  precio: 4000,\n  categoria: \"componente\",\n  imgItem: \"/img/components.jpg\",\n  imgDetalle: \"/img/funcion.jpg\",\n  stock: 11,\n  descripcion: \"Esta oficina obtiene todo para comenzar tu empresa.\"\n}, {\n  nombre: \"Casa de Verano\",\n  id: \"2\",\n  precio: 150,\n  categoria: \"hook\",\n  imgItem: \"/img/hook.jpg\",\n  imgDetalle: \"/img/usestate.jpg\",\n  stock: 22,\n  descripcion: \"Disfruta todo el verano en nuestra casa\"\n}, {\n  nombre: \"Componente de Clase\",\n  id: \"3\",\n  precio: 200,\n  categoria: \"componente\",\n  imgItem: \"/img/components.jpg\",\n  imgDetalle: \"/img/class.jpg\",\n  stock: 3,\n  descripcion: \"Utilizar la sintaxis de class es una de las formas más comunes de definir un componente React. Las class en javascript se introdujeron en ECMAScript 2015 con el objetivo de tener una sintaxis mucho más clara y simple para crear objetos y lidiar con la herencia. Para crear un class component utilizaremos la herencia ya que extenderemos de una class llamada Component que viene con React. Gracias a extender de esta clase podremos hacer cosas cómo manejar el state del componente, escuchar el ciclo de vida, etc.\",\n  extra: \"¡¡¡Últimas unidades!!!\"\n}, {\n  nombre: \"useEffect\",\n  id: \"4\",\n  precio: 250,\n  categoria: \"hook\",\n  imgItem: \"/img/hook.jpg\",\n  imgDetalle: \"/img/useeffect.jpg\",\n  stock: 44,\n  descripcion: \"Al usar este Hook, le estamos indicando a React que el componente tiene que hacer algo después de renderizarse. React recordará la función que le hemos pasado (nos referiremos a ella como nuestro “efecto”), y la llamará más tarde después de actualizar el DOM. En este efecto, actualizamos el título del documento, pero también podríamos hacer peticiones de datos o invocar alguna API imperativa. Poner useEffect dentro del componente nos permite acceder a la variable de estado count (o a cualquier prop) directamente desde el efecto. No necesitamos una API especial para acceder a ella, ya que se encuentra en el ámbito de la función. Los Hooks aprovechan los closures de JavaScript y evitan introducir APIs específicas de React donde JavaScript ya proporciona una solución.\"\n}];\nexport default articulos;","map":{"version":3,"names":["articulos","nombre","id","precio","categoria","imgItem","imgDetalle","stock","descripcion","extra"],"sources":["C:/Users/gerze/Desktop/Actualizado/src/mock/productos.js"],"sourcesContent":["const articulos = [\n  {\n    nombre: \"Oficina de Centro\",\n    id: \"1\",\n    precio: 4000,\n    categoria: \"componente\",\n    imgItem: \"/img/components.jpg\",\n    imgDetalle: \"/img/funcion.jpg\",\n    stock: 11,\n    descripcion:\n      \"Esta oficina obtiene todo para comenzar tu empresa.\"\n  },\n  {\n    nombre: \"Casa de Verano\",\n    id: \"2\",\n    precio: 150,\n    categoria: \"hook\",\n    imgItem: \"/img/hook.jpg\",\n    imgDetalle: \"/img/usestate.jpg\",\n    stock: 22,\n    descripcion:\n      \"Disfruta todo el verano en nuestra casa\"\n  },\n  {\n    nombre: \"Componente de Clase\",\n    id: \"3\",\n    precio: 200,\n    categoria: \"componente\",\n    imgItem: \"/img/components.jpg\",\n    imgDetalle: \"/img/class.jpg\",\n    stock: 3,\n    descripcion:\n      \"Utilizar la sintaxis de class es una de las formas más comunes de definir un componente React. Las class en javascript se introdujeron en ECMAScript 2015 con el objetivo de tener una sintaxis mucho más clara y simple para crear objetos y lidiar con la herencia. Para crear un class component utilizaremos la herencia ya que extenderemos de una class llamada Component que viene con React. Gracias a extender de esta clase podremos hacer cosas cómo manejar el state del componente, escuchar el ciclo de vida, etc.\",\n    extra: \"¡¡¡Últimas unidades!!!\"\n  },\n  {\n    nombre: \"useEffect\",\n    id: \"4\",\n    precio: 250,\n    categoria: \"hook\",\n    imgItem: \"/img/hook.jpg\",\n    imgDetalle: \"/img/useeffect.jpg\",\n    stock: 44,\n    descripcion:\n      \"Al usar este Hook, le estamos indicando a React que el componente tiene que hacer algo después de renderizarse. React recordará la función que le hemos pasado (nos referiremos a ella como nuestro “efecto”), y la llamará más tarde después de actualizar el DOM. En este efecto, actualizamos el título del documento, pero también podríamos hacer peticiones de datos o invocar alguna API imperativa. Poner useEffect dentro del componente nos permite acceder a la variable de estado count (o a cualquier prop) directamente desde el efecto. No necesitamos una API especial para acceder a ella, ya que se encuentra en el ámbito de la función. Los Hooks aprovechan los closures de JavaScript y evitan introducir APIs específicas de React donde JavaScript ya proporciona una solución.\"\n  }\n];\n\nexport default articulos;\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,CAChB;EACEC,MAAM,EAAE,mBADV;EAEEC,EAAE,EAAE,GAFN;EAGEC,MAAM,EAAE,IAHV;EAIEC,SAAS,EAAE,YAJb;EAKEC,OAAO,EAAE,qBALX;EAMEC,UAAU,EAAE,kBANd;EAOEC,KAAK,EAAE,EAPT;EAQEC,WAAW,EACT;AATJ,CADgB,EAYhB;EACEP,MAAM,EAAE,gBADV;EAEEC,EAAE,EAAE,GAFN;EAGEC,MAAM,EAAE,GAHV;EAIEC,SAAS,EAAE,MAJb;EAKEC,OAAO,EAAE,eALX;EAMEC,UAAU,EAAE,mBANd;EAOEC,KAAK,EAAE,EAPT;EAQEC,WAAW,EACT;AATJ,CAZgB,EAuBhB;EACEP,MAAM,EAAE,qBADV;EAEEC,EAAE,EAAE,GAFN;EAGEC,MAAM,EAAE,GAHV;EAIEC,SAAS,EAAE,YAJb;EAKEC,OAAO,EAAE,qBALX;EAMEC,UAAU,EAAE,gBANd;EAOEC,KAAK,EAAE,CAPT;EAQEC,WAAW,EACT,kgBATJ;EAUEC,KAAK,EAAE;AAVT,CAvBgB,EAmChB;EACER,MAAM,EAAE,WADV;EAEEC,EAAE,EAAE,GAFN;EAGEC,MAAM,EAAE,GAHV;EAIEC,SAAS,EAAE,MAJb;EAKEC,OAAO,EAAE,eALX;EAMEC,UAAU,EAAE,oBANd;EAOEC,KAAK,EAAE,EAPT;EAQEC,WAAW,EACT;AATJ,CAnCgB,CAAlB;AAgDA,eAAeR,SAAf"},"metadata":{},"sourceType":"module"}